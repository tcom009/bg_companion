revoke delete on table "public"."products" from "anon";

revoke insert on table "public"."products" from "anon";

revoke references on table "public"."products" from "anon";

revoke select on table "public"."products" from "anon";

revoke trigger on table "public"."products" from "anon";

revoke truncate on table "public"."products" from "anon";

revoke update on table "public"."products" from "anon";

revoke delete on table "public"."products" from "authenticated";

revoke insert on table "public"."products" from "authenticated";

revoke references on table "public"."products" from "authenticated";

revoke select on table "public"."products" from "authenticated";

revoke trigger on table "public"."products" from "authenticated";

revoke truncate on table "public"."products" from "authenticated";

revoke update on table "public"."products" from "authenticated";

revoke delete on table "public"."products" from "service_role";

revoke insert on table "public"."products" from "service_role";

revoke references on table "public"."products" from "service_role";

revoke select on table "public"."products" from "service_role";

revoke trigger on table "public"."products" from "service_role";

revoke truncate on table "public"."products" from "service_role";

revoke update on table "public"."products" from "service_role";

alter table "public"."products" drop constraint "products_id_key";

alter table "public"."products" drop constraint "products_user_id_fkey";

alter table "public"."products" drop constraint "products_pkey";

drop index if exists "public"."products_id_key";

drop index if exists "public"."products_pkey";

drop table "public"."products";

create table "public"."catalog" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user" uuid
);


alter table "public"."catalog" enable row level security;

create table "public"."profiles" (
    "profile_id" uuid not null,
    "first_name" text,
    "last_name" text,
    "phone" text,
    "city" text,
    "country" text
);


alter table "public"."profiles" enable row level security;

create table "public"."user_games" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "owner_id" uuid default gen_random_uuid(),
    "bgg_id" bigint,
    "condition" character varying,
    "is_sold" boolean,
    "observations" character varying,
    "price" real,
    "language_dependency" character varying,
    "language" character varying,
    "game_name" character varying,
    "image" character varying,
    "catalog" bigint
);


alter table "public"."user_games" enable row level security;

CREATE UNIQUE INDEX catalog_pkey ON public.catalog USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (profile_id);

CREATE UNIQUE INDEX user_games_pkey ON public.user_games USING btree (id);

alter table "public"."catalog" add constraint "catalog_pkey" PRIMARY KEY using index "catalog_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."user_games" add constraint "user_games_pkey" PRIMARY KEY using index "user_games_pkey";

alter table "public"."catalog" add constraint "public_catalog_user_fkey" FOREIGN KEY ("user") REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."catalog" validate constraint "public_catalog_user_fkey";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (profile_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

alter table "public"."user_games" add constraint "public_user_games_catalog_fkey" FOREIGN KEY (catalog) REFERENCES catalog(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_games" validate constraint "public_user_games_catalog_fkey";

alter table "public"."user_games" add constraint "public_user_games_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES auth.users(id) not valid;

alter table "public"."user_games" validate constraint "public_user_games_owner_id_fkey";

grant delete on table "public"."catalog" to "anon";

grant insert on table "public"."catalog" to "anon";

grant references on table "public"."catalog" to "anon";

grant select on table "public"."catalog" to "anon";

grant trigger on table "public"."catalog" to "anon";

grant truncate on table "public"."catalog" to "anon";

grant update on table "public"."catalog" to "anon";

grant delete on table "public"."catalog" to "authenticated";

grant insert on table "public"."catalog" to "authenticated";

grant references on table "public"."catalog" to "authenticated";

grant select on table "public"."catalog" to "authenticated";

grant trigger on table "public"."catalog" to "authenticated";

grant truncate on table "public"."catalog" to "authenticated";

grant update on table "public"."catalog" to "authenticated";

grant delete on table "public"."catalog" to "service_role";

grant insert on table "public"."catalog" to "service_role";

grant references on table "public"."catalog" to "service_role";

grant select on table "public"."catalog" to "service_role";

grant trigger on table "public"."catalog" to "service_role";

grant truncate on table "public"."catalog" to "service_role";

grant update on table "public"."catalog" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."user_games" to "anon";

grant insert on table "public"."user_games" to "anon";

grant references on table "public"."user_games" to "anon";

grant select on table "public"."user_games" to "anon";

grant trigger on table "public"."user_games" to "anon";

grant truncate on table "public"."user_games" to "anon";

grant update on table "public"."user_games" to "anon";

grant delete on table "public"."user_games" to "authenticated";

grant insert on table "public"."user_games" to "authenticated";

grant references on table "public"."user_games" to "authenticated";

grant select on table "public"."user_games" to "authenticated";

grant trigger on table "public"."user_games" to "authenticated";

grant truncate on table "public"."user_games" to "authenticated";

grant update on table "public"."user_games" to "authenticated";

grant delete on table "public"."user_games" to "service_role";

grant insert on table "public"."user_games" to "service_role";

grant references on table "public"."user_games" to "service_role";

grant select on table "public"."user_games" to "service_role";

grant trigger on table "public"."user_games" to "service_role";

grant truncate on table "public"."user_games" to "service_role";

grant update on table "public"."user_games" to "service_role";

create policy "Users can update own profile."
on "public"."profiles"
as permissive
for update
to public
using ((auth.uid() = profile_id));


create policy "insert_profile"
on "public"."profiles"
as permissive
for insert
to public
with check (((auth.uid() IS NOT NULL) AND (NOT (EXISTS ( SELECT 1
   FROM profiles profiles_1
  WHERE (profiles_1.profile_id = auth.uid()))))));


create policy "select_user_games_policy"
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "delete_confidential_data"
on "public"."user_games"
as permissive
for delete
to public
using ((auth.uid() = owner_id));


create policy "insert_user_games"
on "public"."user_games"
as permissive
for insert
to public
with check ((auth.uid() IS NOT NULL));


create policy "select_user_games_policy"
on "public"."user_games"
as permissive
for select
to public
using (true);


create policy "update_confidential_data"
on "public"."user_games"
as permissive
for update
to public
using ((auth.uid() = owner_id));



